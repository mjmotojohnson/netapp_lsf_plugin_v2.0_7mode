#!/usr/bin/python2.6

#################################################################
#                                                               #
# Copyright (c) 2013 NetApp, Inc. All rights reserved.          #
# Specifications subject to change without notice.              #
#                                                               #
# netapp_lsf_hot_job_email.py - Python script that sends an		#
#		email message to administrators, alerting them to		#
#		detected performance problems and listing those LSF		#
#		jobs that have performed the most operations on the		#
#		impacted storage object. This data is expected to be	#
#		passed into this script in the form of a file path as	#
#		the final argument when running this script. The		#
#		report file is generated by the NetApp Hot Job			#
#		Detector script.										#
#																#
#		The fromAddress, toAddresses list, and smtpServer		#
#		variables below should be changed to appropriate		#
#		values for the current environment.						#
#                                                               #
#################################################################



import smtplib, sys
from email.mime.text import MIMEText

toAddresses = ['lsfadministrator@domain.com']
fromAddress = 'NetApp LSF Report@domain.com'
smtpServer = 'smtp.domain.com'

subject = 'NetApp LSF Hot Job Report'

# Read the passed-in report file.
lastArgument = sys.argv[-1]
if not lastArgument.endswith('.txt'):
	#print 'Expected last argument to be report text file, but instead encountered argument %s. Exiting.' % (lastArgument)
	sys.exit(-1)

reportText = ''
try:
	f = open(lastArgument, 'r')
	try:
		reportText = f.read()
	finally:
		f.close()
except IOError as e:
	#print 'Encountered I/O error %d trying to read report text file %s. Error was: %s' % (e.errno, reportFilePath, e.strerror)
	sys.exit(-1)
	

body = 'The NetApp LSF Hot Job Detection script has discovered the following performance problems based on the configured thresholds. The LSF jobs performing the most operations on the impacted target(s) are listed below.\n\n'
body += reportText

msg = MIMEText(body)
msg['Subject'] = subject
msg['From'] = fromAddress
msg['To'] = (', '.join(toAddresses))

try:
	server = smtplib.SMTP(smtpServer)
	#server.sendmail(fromAddress, toAddresses, msg.as_string())
	server.quit()
	#print 'Successfully sent email report.'
except smtplib.SMTPRecipientsRefused:
	#print 'Failed to send email - SMTP server refused all recipients.'
	sys.exit(-1)
except smtplib.SMTPHeloError:
	#print 'Failed to send email - SMTP server refused HELO message.'
	sys.exit(-1)
except smtplib.SMTPSenderRefused:
	#print 'Failed to send email - SMTP server did not accept from_addr %s.' % (fromAddress)
	sys.exit(-1)
except smtplib.SMTPDataError:
	#print 'Failed to send email - SMTP server replied with an unexpected error code.'
	sys.exit(-1)
	
sys.exit(0)
